/*    A list of common methods*/function createLayer(layerName){    var artLayerRef = app.activeDocument.artLayers.add();    artLayerRef.kind = LayerKind.NORMAL;    artLayerRef.name = layerName;  }function addLine(startPoint, endPoint, lineSubPathArray, pos){     var lineArray = new Array();    lineArray[0] = new PathPointInfo;    lineArray[0].kind = PointKind.CORNERPOINT;    lineArray[0].anchor = startPoint;    lineArray[0].leftDirection = startPoint;    lineArray[0].rightDirection = startPoint;    lineArray[1] = new PathPointInfo;    lineArray[1].kind = PointKind.CORNERPOINT;    lineArray[1].anchor = endPoint;    lineArray[1].leftDirection = endPoint;    lineArray[1].rightDirection = endPoint;    lineSubPathArray[pos] = new SubPathInfo();    lineSubPathArray[pos].operation = ShapeOperation.SHAPEXOR;    lineSubPathArray[pos].closed = true;    lineSubPathArray[pos].entireSubPath = lineArray;}function addCurve(startPoint, endPoint, midPoint, midPointLeftDirection, midPointRightDirection, lineSubPathArray, pos){    var lineArray = new Array();    lineArray[0] = new PathPointInfo;    lineArray[0].kind = PointKind.CORNERPOINT;    lineArray[0].anchor = startPoint;    lineArray[0].leftDirection = startPoint;    lineArray[0].rightDirection = startPoint;    lineArray[1] = new PathPointInfo;    lineArray[1].kind = PointKind.CORNERPOINT;    lineArray[1].anchor = midPoint;    lineArray[1].leftDirection = midPointLeftDirection;    lineArray[1].rightDirection = midPointRightDirection;    lineArray[2] = new PathPointInfo;    lineArray[2].kind = PointKind.CORNERPOINT;    lineArray[2].anchor = endPoint;    lineArray[2].leftDirection = endPoint;    lineArray[2].rightDirection = endPoint;    lineSubPathArray[pos] = new SubPathInfo();    lineSubPathArray[pos].operation = ShapeOperation.SHAPEXOR;    lineSubPathArray[pos].closed = false;    lineSubPathArray[pos].entireSubPath = lineArray;}function addFrame(){    addLine(Array(origX, origY), Array(origX + docWidth, origY), lineSubPathArray, lineSubPathArrayPos++);    addLine(Array(origX + docWidth, origY), Array(origX + docWidth, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);    addLine(Array(origX + docWidth, origY + docHeight), Array(origX, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);        addLine(Array(origX, origY + docHeight), Array(origX, origY), lineSubPathArray, lineSubPathArrayPos++);}function hasSelection(){    try    {        var b = activeDocument.selection.bounds;        return true;    } catch (error)    {        return false;    }}function makeGoldenRectangleSelection(isHorizontal){    hadSelection = false; // set to false because the original selection will be broken anyway    var oX = origX;    var oY = origY;    var oWidth = docWidth;    var oHeight = docHeight;        if(isHorizontal)    {        if(docWidth > docHeight * 1.618)        {            docWidth = docHeight * 1.618;            origX += (oWidth - docWidth) / 2;        }else        {            docHeight = docWidth / 1.618;                    origY += (oHeight - docHeight) / 2;        }    }else    {        if(docWidth > docHeight / 1.618)        {            docWidth = docHeight / 1.618;            origX += (oWidth - docWidth) / 2;        }else        {            docHeight = docWidth * 1.618;                    origY += (oHeight - docHeight) / 2;        }    }    var goldenRectangleSelection = Array(                Array(origX, origY),                Array(origX + docWidth, origY),                Array(origX + docWidth, origY + docHeight),                Array(origX, origY + docHeight),                Array(origX, origY),                );    app.activeDocument.selection.select(goldenRectangleSelection);}function addRectangleSections(isHorizontal){    var numIterations = 2;        if(isHorizontal)    {        for(var i = 0; i < numIterations; i++)        {            origX += docHeight;            docWidth -= docHeight;            addLine(Array(origX, origY), Array(origX, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);            origY += docWidth;            docHeight -= docWidth;            addLine(Array(origX, origY), Array(origX + docWidth, origY), lineSubPathArray, lineSubPathArrayPos++);            docWidth -= docHeight;            addLine(Array(origX + docWidth, origY), Array(origX + docWidth, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);            docHeight -= docWidth;            addLine(Array(origX, origY + docHeight), Array(origX + docWidth, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);        }    }else    {        for(var i = 0; i < numIterations; i++)        {            origY += docWidth;            docHeight -= docWidth;            addLine(Array(origX, origY), Array(origX + docWidth, origY), lineSubPathArray, lineSubPathArrayPos++);            origX += docHeight;            docWidth -= docHeight;            addLine(Array(origX, origY), Array(origX, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);            docHeight -= docWidth;            addLine(Array(origX, origY + docHeight), Array(origX + docWidth, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);            docWidth -= docHeight;            addLine(Array(origX + docWidth, origY), Array(origX + docWidth, origY + docHeight), lineSubPathArray, lineSubPathArrayPos++);        }    }}function addCurveSections(isHorizontal){    var ratio = 0.293;    var numIterations = 2;        var segm;    var mp;    var mpLeftDirection;    var mpRightDirection;    if(isHorizontal)    {        for(var i = 0; i < numIterations; i++)        {            segm = docHeight * ratio;            mp = Array(origX + segm, origY + segm);            mpLeftDirection = Array(origX + segm * 2, origY);            mpRightDirection = Array(origX, origY + segm * 2);            addCurve(Array(origX, origY + docHeight), Array(origX + docHeight, origY), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            origX += docHeight;            docWidth -= docHeight;            segm = docWidth * ratio;            mp = Array(origX + docWidth - segm, origY + segm);            mpLeftDirection = Array(origX + docWidth, origY + segm * 2);            mpRightDirection = Array(origX + docWidth - segm * 2, origY);            addCurve(Array(origX, origY), Array(origX + docWidth, origY + docWidth), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            origY += docWidth;            docHeight -= docWidth;            segm = docHeight * ratio;            mp = Array(origX + docWidth - segm, origY + docHeight - segm);            mpLeftDirection = Array(origX + docWidth - segm * 2, origY + docHeight);            mpRightDirection = Array(origX + docWidth, origY + docHeight  - segm * 2);            addCurve(Array(origX + docWidth, origY), Array(origX + docWidth - docHeight, origY + docHeight), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            docWidth -= docHeight;            segm = docWidth * ratio;            mp = Array(origX + segm, origY + docHeight - segm);            mpLeftDirection = Array(origX, origY + docHeight - segm * 2);            mpRightDirection = Array(origX + segm * 2, origY + docHeight);            addCurve(Array(origX + docWidth, origY + docHeight), Array(origX, origY + docHeight - docWidth), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            docHeight -= docWidth;        }    }else    {        for(var i = 0; i < numIterations; i++)        {            segm = docWidth * ratio;            mp = Array(origX + segm, origY + segm);            mpLeftDirection = Array(origX, origY + segm * 2);            mpRightDirection = Array(origX + segm * 2, origY);            addCurve(Array(origX + docWidth, origY), Array(origX, origY + docWidth), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            origY += docWidth;            docHeight -= docWidth;            segm = docHeight * ratio;            mp = Array(origX + segm, origY + docHeight - segm);            mpLeftDirection = Array(origX + segm * 2, origY + docHeight);            mpRightDirection = Array(origX, origY + docHeight - segm * 2);            addCurve(Array(origX, origY), Array(origX + docHeight, origY + docHeight), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            origX += docHeight;            docWidth -= docHeight;            segm = docWidth * ratio;            mp = Array(origX + docWidth - segm, origY + docHeight - segm);            mpLeftDirection = Array(origX + docWidth, origY + docHeight - segm * 2);            mpRightDirection = Array(origX + docWidth - segm * 2, origY + docHeight);            addCurve(Array(origX, origY + docHeight), Array(origX + docWidth, origY + docHeight - docWidth), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            docHeight -= docWidth;            segm = docHeight * ratio;            mp = Array(origX + docWidth - segm, origY + segm);            mpLeftDirection = Array(origX + docWidth - segm * 2, origY);            mpRightDirection = Array(origX + docWidth, origY + segm * 2);            addCurve(Array(origX + docWidth, origY + docHeight), Array(origX + docWidth - docHeight, origY), mp, mpLeftDirection, mpRightDirection, lineSubPathArray, lineSubPathArrayPos++);            docWidth -= docHeight;        }    }}